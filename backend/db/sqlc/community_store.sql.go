// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: community_store.sql

package db

import (
	"context"
)

const createCommunityStore = `-- name: CreateCommunityStore :one
INSERT INTO community_stores (
  community_id,
  store_id
) VALUES (
  $1,
  $2
) RETURNING community_id, store_id, added_at
`

type CreateCommunityStoreParams struct {
	CommunityID int64 `json:"community_id"`
	StoreID     int64 `json:"store_id"`
}

func (q *Queries) CreateCommunityStore(ctx context.Context, arg CreateCommunityStoreParams) (CommunityStore, error) {
	row := q.db.QueryRowContext(ctx, createCommunityStore, arg.CommunityID, arg.StoreID)
	var i CommunityStore
	err := row.Scan(&i.CommunityID, &i.StoreID, &i.AddedAt)
	return i, err
}

const deleteCommunityStore = `-- name: DeleteCommunityStore :exec
DELETE FROM community_stores WHERE
    community_id = $1 AND
    store_id = $2
`

type DeleteCommunityStoreParams struct {
	CommunityID int64 `json:"community_id"`
	StoreID     int64 `json:"store_id"`
}

func (q *Queries) DeleteCommunityStore(ctx context.Context, arg DeleteCommunityStoreParams) error {
	_, err := q.db.ExecContext(ctx, deleteCommunityStore, arg.CommunityID, arg.StoreID)
	return err
}

const deleteCommunityStoresByCommunity = `-- name: DeleteCommunityStoresByCommunity :exec
DELETE FROM community_stores WHERE
    community_id = $1
`

func (q *Queries) DeleteCommunityStoresByCommunity(ctx context.Context, communityID int64) error {
	_, err := q.db.ExecContext(ctx, deleteCommunityStoresByCommunity, communityID)
	return err
}

const deleteCommunityStoresByStore = `-- name: DeleteCommunityStoresByStore :exec
DELETE FROM community_stores WHERE
    store_id = $1
`

func (q *Queries) DeleteCommunityStoresByStore(ctx context.Context, storeID int64) error {
	_, err := q.db.ExecContext(ctx, deleteCommunityStoresByStore, storeID)
	return err
}

const getCommunityStore = `-- name: GetCommunityStore :one
SELECT community_id, store_id, added_at FROM community_stores WHERE
    community_id = $1 AND
    store_id = $2
`

type GetCommunityStoreParams struct {
	CommunityID int64 `json:"community_id"`
	StoreID     int64 `json:"store_id"`
}

func (q *Queries) GetCommunityStore(ctx context.Context, arg GetCommunityStoreParams) (CommunityStore, error) {
	row := q.db.QueryRowContext(ctx, getCommunityStore, arg.CommunityID, arg.StoreID)
	var i CommunityStore
	err := row.Scan(&i.CommunityID, &i.StoreID, &i.AddedAt)
	return i, err
}

const listCommunityStoresByCommunity = `-- name: ListCommunityStoresByCommunity :many
SELECT community_id, store_id, added_at FROM community_stores WHERE community_id = $1
`

func (q *Queries) ListCommunityStoresByCommunity(ctx context.Context, communityID int64) ([]CommunityStore, error) {
	rows, err := q.db.QueryContext(ctx, listCommunityStoresByCommunity, communityID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CommunityStore{}
	for rows.Next() {
		var i CommunityStore
		if err := rows.Scan(&i.CommunityID, &i.StoreID, &i.AddedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCommunityStoresByStores = `-- name: ListCommunityStoresByStores :many
SELECT community_id, store_id, added_at FROM community_stores WHERE store_id = $1
`

func (q *Queries) ListCommunityStoresByStores(ctx context.Context, storeID int64) ([]CommunityStore, error) {
	rows, err := q.db.QueryContext(ctx, listCommunityStoresByStores, storeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CommunityStore{}
	for rows.Next() {
		var i CommunityStore
		if err := rows.Scan(&i.CommunityID, &i.StoreID, &i.AddedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
