// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    email,
    hashed_password,
    full_name,
    phone_number,
    place_id,
    address,
    x_coord,
    y_coord
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING id, email, hashed_password, full_name, phone_number, created_at, place_id, profile_picture, x_coord, y_coord, address
`

type CreateUserParams struct {
	Email          string  `json:"email"`
	HashedPassword string  `json:"hashed_password"`
	FullName       string  `json:"full_name"`
	PhoneNumber    string  `json:"phone_number"`
	PlaceID        string  `json:"place_id"`
	Address        string  `json:"address"`
	XCoord         float64 `json:"x_coord"`
	YCoord         float64 `json:"y_coord"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Email,
		arg.HashedPassword,
		arg.FullName,
		arg.PhoneNumber,
		arg.PlaceID,
		arg.Address,
		arg.XCoord,
		arg.YCoord,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.HashedPassword,
		&i.FullName,
		&i.PhoneNumber,
		&i.CreatedAt,
		&i.PlaceID,
		&i.ProfilePicture,
		&i.XCoord,
		&i.YCoord,
		&i.Address,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getRequestsForUserByStatus = `-- name: GetRequestsForUserByStatus :many
SELECT id, created_at, user_id, community_id, status, errand_id, store_id FROM requests
WHERE user_id = $1 AND status = $2
`

type GetRequestsForUserByStatusParams struct {
	UserID int64         `json:"user_id"`
	Status RequestStatus `json:"status"`
}

func (q *Queries) GetRequestsForUserByStatus(ctx context.Context, arg GetRequestsForUserByStatusParams) ([]Request, error) {
	rows, err := q.db.QueryContext(ctx, getRequestsForUserByStatus, arg.UserID, arg.Status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Request{}
	for rows.Next() {
		var i Request
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UserID,
			&i.CommunityID,
			&i.Status,
			&i.ErrandID,
			&i.StoreID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT id, email, hashed_password, full_name, phone_number, created_at, place_id, profile_picture, x_coord, y_coord, address FROM users WHERE id = $1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.HashedPassword,
		&i.FullName,
		&i.PhoneNumber,
		&i.CreatedAt,
		&i.PlaceID,
		&i.ProfilePicture,
		&i.XCoord,
		&i.YCoord,
		&i.Address,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, hashed_password, full_name, phone_number, created_at, place_id, profile_picture, x_coord, y_coord, address FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.HashedPassword,
		&i.FullName,
		&i.PhoneNumber,
		&i.CreatedAt,
		&i.PlaceID,
		&i.ProfilePicture,
		&i.XCoord,
		&i.YCoord,
		&i.Address,
	)
	return i, err
}

const getUserByPhoneNumber = `-- name: GetUserByPhoneNumber :one
SELECT id, email, hashed_password, full_name, phone_number, created_at, place_id, profile_picture, x_coord, y_coord, address FROM users WHERE phone_number = $1
`

func (q *Queries) GetUserByPhoneNumber(ctx context.Context, phoneNumber string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByPhoneNumber, phoneNumber)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.HashedPassword,
		&i.FullName,
		&i.PhoneNumber,
		&i.CreatedAt,
		&i.PlaceID,
		&i.ProfilePicture,
		&i.XCoord,
		&i.YCoord,
		&i.Address,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, email, hashed_password, full_name, phone_number, created_at, place_id, profile_picture, x_coord, y_coord, address FROM users
LIMIT $1
OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.HashedPassword,
			&i.FullName,
			&i.PhoneNumber,
			&i.CreatedAt,
			&i.PlaceID,
			&i.ProfilePicture,
			&i.XCoord,
			&i.YCoord,
			&i.Address,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users SET
    email = $2,
    hashed_password = $3,
    full_name = $4,
    phone_number = $5,
    place_id = $6,
    address = $7,
    x_coord = $8,
    y_coord = $9
WHERE id = $1
RETURNING id, email, hashed_password, full_name, phone_number, created_at, place_id, profile_picture, x_coord, y_coord, address
`

type UpdateUserParams struct {
	ID             int64   `json:"id"`
	Email          string  `json:"email"`
	HashedPassword string  `json:"hashed_password"`
	FullName       string  `json:"full_name"`
	PhoneNumber    string  `json:"phone_number"`
	PlaceID        string  `json:"place_id"`
	Address        string  `json:"address"`
	XCoord         float64 `json:"x_coord"`
	YCoord         float64 `json:"y_coord"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.ID,
		arg.Email,
		arg.HashedPassword,
		arg.FullName,
		arg.PhoneNumber,
		arg.PlaceID,
		arg.Address,
		arg.XCoord,
		arg.YCoord,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.HashedPassword,
		&i.FullName,
		&i.PhoneNumber,
		&i.CreatedAt,
		&i.PlaceID,
		&i.ProfilePicture,
		&i.XCoord,
		&i.YCoord,
		&i.Address,
	)
	return i, err
}

const updateUserLocation = `-- name: UpdateUserLocation :exec
UPDATE users SET
    place_id = $2,
    address = $3,
    x_coord = $4,
    y_coord = $5
WHERE id = $1
`

type UpdateUserLocationParams struct {
	ID      int64   `json:"id"`
	PlaceID string  `json:"place_id"`
	Address string  `json:"address"`
	XCoord  float64 `json:"x_coord"`
	YCoord  float64 `json:"y_coord"`
}

func (q *Queries) UpdateUserLocation(ctx context.Context, arg UpdateUserLocationParams) error {
	_, err := q.db.ExecContext(ctx, updateUserLocation,
		arg.ID,
		arg.PlaceID,
		arg.Address,
		arg.XCoord,
		arg.YCoord,
	)
	return err
}
