// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0

package db

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"
)

type ItemQuantityType string

const (
	ItemQuantityTypeNumerical ItemQuantityType = "numerical"
	ItemQuantityTypeOz        ItemQuantityType = "oz"
	ItemQuantityTypeLbs       ItemQuantityType = "lbs"
	ItemQuantityTypeFlOz      ItemQuantityType = "fl_oz"
	ItemQuantityTypeGal       ItemQuantityType = "gal"
	ItemQuantityTypeLitres    ItemQuantityType = "litres"
)

func (e *ItemQuantityType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ItemQuantityType(s)
	case string:
		*e = ItemQuantityType(s)
	default:
		return fmt.Errorf("unsupported scan type for ItemQuantityType: %T", src)
	}
	return nil
}

type NullItemQuantityType struct {
	ItemQuantityType ItemQuantityType
	Valid            bool // Valid is true if ItemQuantityType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullItemQuantityType) Scan(value interface{}) error {
	if value == nil {
		ns.ItemQuantityType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ItemQuantityType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullItemQuantityType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.ItemQuantityType, nil
}

type RequestStatus string

const (
	RequestStatusPending    RequestStatus = "pending"
	RequestStatusInProgress RequestStatus = "in_progress"
	RequestStatusCompleted  RequestStatus = "completed"
)

func (e *RequestStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = RequestStatus(s)
	case string:
		*e = RequestStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for RequestStatus: %T", src)
	}
	return nil
}

type NullRequestStatus struct {
	RequestStatus RequestStatus
	Valid         bool // Valid is true if RequestStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRequestStatus) Scan(value interface{}) error {
	if value == nil {
		ns.RequestStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.RequestStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRequestStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.RequestStatus, nil
}

type Community struct {
	ID           int64     `json:"id"`
	Name         string    `json:"name"`
	Admin        int64     `json:"admin"`
	PlaceID      string    `json:"place_id"`
	CenterXCoord float64   `json:"center_x_coord"`
	CenterYCoord float64   `json:"center_y_coord"`
	Range        int32     `json:"range"`
	Address      string    `json:"address"`
	CreatedAt    time.Time `json:"created_at"`
}

type CommunityStore struct {
	CommunityID int64     `json:"community_id"`
	StoreID     int64     `json:"store_id"`
	AddedAt     time.Time `json:"added_at"`
}

type Errand struct {
	ID          int64     `json:"id"`
	UserID      int64     `json:"user_id"`
	CommunityID int64     `json:"community_id"`
	IsComplete  bool      `json:"is_complete"`
	CreatedAt   time.Time `json:"created_at"`
	CompletedAt time.Time `json:"completed_at"`
}

type Item struct {
	ID             int64            `json:"id"`
	RequestedBy    int64            `json:"requested_by"`
	RequestID      int64            `json:"request_id"`
	Name           string           `json:"name"`
	QuantityType   ItemQuantityType `json:"quantity_type"`
	Quantity       float64          `json:"quantity"`
	PreferredBrand sql.NullString   `json:"preferred_brand"`
	// base64 encoded
	Image      sql.NullString `json:"image"`
	Found      sql.NullBool   `json:"found"`
	ExtraNotes sql.NullString `json:"extra_notes"`
}

type Member struct {
	UserID      int64     `json:"user_id"`
	CommunityID int64     `json:"community_id"`
	JoinedAt    time.Time `json:"joined_at"`
}

type Request struct {
	ID          int64         `json:"id"`
	CreatedAt   time.Time     `json:"created_at"`
	UserID      int64         `json:"user_id"`
	CommunityID sql.NullInt64 `json:"community_id"`
	Status      RequestStatus `json:"status"`
	ErrandID    int64         `json:"errand_id"`
	StoreID     sql.NullInt64 `json:"store_id"`
}

type Store struct {
	ID      int64   `json:"id"`
	Name    string  `json:"name"`
	XCoord  float64 `json:"x_coord"`
	YCoord  float64 `json:"y_coord"`
	Address string  `json:"address"`
	PlaceID string  `json:"place_id"`
}

type User struct {
	ID             int64     `json:"id"`
	Email          string    `json:"email"`
	HashedPassword string    `json:"hashed_password"`
	FullName       string    `json:"full_name"`
	PhoneNumber    string    `json:"phone_number"`
	CreatedAt      time.Time `json:"created_at"`
	PlaceID        string    `json:"place_id"`
	// base64 encoded
	ProfilePicture string  `json:"profile_picture"`
	XCoord         float64 `json:"x_coord"`
	YCoord         float64 `json:"y_coord"`
	Address        string  `json:"address"`
}
