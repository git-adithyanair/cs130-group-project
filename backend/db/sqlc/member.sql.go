// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: member.sql

package db

import (
	"context"
)

const createMember = `-- name: CreateMember :one
INSERT INTO members (
  user_id,
  community_id
) VALUES (
  $1,
  $2
) RETURNING user_id, community_id, joined_at
`

type CreateMemberParams struct {
	UserID      int64 `json:"user_id"`
	CommunityID int64 `json:"community_id"`
}

func (q *Queries) CreateMember(ctx context.Context, arg CreateMemberParams) (Member, error) {
	row := q.db.QueryRowContext(ctx, createMember, arg.UserID, arg.CommunityID)
	var i Member
	err := row.Scan(&i.UserID, &i.CommunityID, &i.JoinedAt)
	return i, err
}

const deleteMember = `-- name: DeleteMember :exec
DELETE FROM members WHERE
    user_id = $1 AND
    community_id = $2
`

type DeleteMemberParams struct {
	UserID      int64 `json:"user_id"`
	CommunityID int64 `json:"community_id"`
}

func (q *Queries) DeleteMember(ctx context.Context, arg DeleteMemberParams) error {
	_, err := q.db.ExecContext(ctx, deleteMember, arg.UserID, arg.CommunityID)
	return err
}

const deleteMembersByCommunity = `-- name: DeleteMembersByCommunity :exec
DELETE FROM members WHERE
    community_id = $1
`

func (q *Queries) DeleteMembersByCommunity(ctx context.Context, communityID int64) error {
	_, err := q.db.ExecContext(ctx, deleteMembersByCommunity, communityID)
	return err
}

const deleteMembersByUser = `-- name: DeleteMembersByUser :exec
DELETE FROM members WHERE
    user_id = $1
`

func (q *Queries) DeleteMembersByUser(ctx context.Context, userID int64) error {
	_, err := q.db.ExecContext(ctx, deleteMembersByUser, userID)
	return err
}

const getMember = `-- name: GetMember :one
SELECT user_id, community_id, joined_at FROM members WHERE
    user_id = $1 AND
    community_id = $2
`

type GetMemberParams struct {
	UserID      int64 `json:"user_id"`
	CommunityID int64 `json:"community_id"`
}

func (q *Queries) GetMember(ctx context.Context, arg GetMemberParams) (Member, error) {
	row := q.db.QueryRowContext(ctx, getMember, arg.UserID, arg.CommunityID)
	var i Member
	err := row.Scan(&i.UserID, &i.CommunityID, &i.JoinedAt)
	return i, err
}

const listMembersByCommunity = `-- name: ListMembersByCommunity :many
SELECT user_id, community_id, joined_at FROM members WHERE community_id = $1
`

func (q *Queries) ListMembersByCommunity(ctx context.Context, communityID int64) ([]Member, error) {
	rows, err := q.db.QueryContext(ctx, listMembersByCommunity, communityID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Member{}
	for rows.Next() {
		var i Member
		if err := rows.Scan(&i.UserID, &i.CommunityID, &i.JoinedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMembersByUser = `-- name: ListMembersByUser :many
SELECT user_id, community_id, joined_at FROM members WHERE user_id = $1
`

func (q *Queries) ListMembersByUser(ctx context.Context, userID int64) ([]Member, error) {
	rows, err := q.db.QueryContext(ctx, listMembersByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Member{}
	for rows.Next() {
		var i Member
		if err := rows.Scan(&i.UserID, &i.CommunityID, &i.JoinedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
