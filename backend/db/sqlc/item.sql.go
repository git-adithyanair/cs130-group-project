// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: item.sql

package db

import (
	"context"
	"database/sql"
)

const createItem = `-- name: CreateItem :one
INSERT INTO items (
    name,
    requested_by,
    request_id,
    quantity_type,
    quantity,
    preferred_brand,
    preferred_store,
    image,
    extra_notes
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9
) RETURNING id, requested_by, request_id, name, quantity_type, quantity, preferred_brand, preferred_store, image, found, extra_notes
`

type CreateItemParams struct {
	Name           string           `json:"name"`
	RequestedBy    int64            `json:"requested_by"`
	RequestID      int64            `json:"request_id"`
	QuantityType   ItemQuantityType `json:"quantity_type"`
	Quantity       float64          `json:"quantity"`
	PreferredBrand sql.NullString   `json:"preferred_brand"`
	PreferredStore sql.NullInt64    `json:"preferred_store"`
	Image          sql.NullString   `json:"image"`
	ExtraNotes     sql.NullString   `json:"extra_notes"`
}

func (q *Queries) CreateItem(ctx context.Context, arg CreateItemParams) (Item, error) {
	row := q.db.QueryRowContext(ctx, createItem,
		arg.Name,
		arg.RequestedBy,
		arg.RequestID,
		arg.QuantityType,
		arg.Quantity,
		arg.PreferredBrand,
		arg.PreferredStore,
		arg.Image,
		arg.ExtraNotes,
	)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.RequestedBy,
		&i.RequestID,
		&i.Name,
		&i.QuantityType,
		&i.Quantity,
		&i.PreferredBrand,
		&i.PreferredStore,
		&i.Image,
		&i.Found,
		&i.ExtraNotes,
	)
	return i, err
}

const deleteItem = `-- name: DeleteItem :exec
DELETE FROM items WHERE id = $1
`

func (q *Queries) DeleteItem(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteItem, id)
	return err
}

const deleteItemsByPreferredStore = `-- name: DeleteItemsByPreferredStore :exec
DELETE FROM items WHERE preferred_store = $1
`

func (q *Queries) DeleteItemsByPreferredStore(ctx context.Context, preferredStore sql.NullInt64) error {
	_, err := q.db.ExecContext(ctx, deleteItemsByPreferredStore, preferredStore)
	return err
}

const deleteItemsByRequest = `-- name: DeleteItemsByRequest :exec
DELETE FROM items WHERE request_id = $1
`

func (q *Queries) DeleteItemsByRequest(ctx context.Context, requestID int64) error {
	_, err := q.db.ExecContext(ctx, deleteItemsByRequest, requestID)
	return err
}

const deleteItemsByUser = `-- name: DeleteItemsByUser :exec
DELETE FROM items WHERE requested_by = $1
`

func (q *Queries) DeleteItemsByUser(ctx context.Context, requestedBy int64) error {
	_, err := q.db.ExecContext(ctx, deleteItemsByUser, requestedBy)
	return err
}

const getItem = `-- name: GetItem :one
SELECT id, requested_by, request_id, name, quantity_type, quantity, preferred_brand, preferred_store, image, found, extra_notes FROM items WHERE id = $1
`

func (q *Queries) GetItem(ctx context.Context, id int64) (Item, error) {
	row := q.db.QueryRowContext(ctx, getItem, id)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.RequestedBy,
		&i.RequestID,
		&i.Name,
		&i.QuantityType,
		&i.Quantity,
		&i.PreferredBrand,
		&i.PreferredStore,
		&i.Image,
		&i.Found,
		&i.ExtraNotes,
	)
	return i, err
}

const getItemsByPreferredStore = `-- name: GetItemsByPreferredStore :many
SELECT id, requested_by, request_id, name, quantity_type, quantity, preferred_brand, preferred_store, image, found, extra_notes FROM items WHERE preferred_store = $1
`

func (q *Queries) GetItemsByPreferredStore(ctx context.Context, preferredStore sql.NullInt64) ([]Item, error) {
	rows, err := q.db.QueryContext(ctx, getItemsByPreferredStore, preferredStore)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Item{}
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.ID,
			&i.RequestedBy,
			&i.RequestID,
			&i.Name,
			&i.QuantityType,
			&i.Quantity,
			&i.PreferredBrand,
			&i.PreferredStore,
			&i.Image,
			&i.Found,
			&i.ExtraNotes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getItemsByRequest = `-- name: GetItemsByRequest :many
SELECT id, requested_by, request_id, name, quantity_type, quantity, preferred_brand, preferred_store, image, found, extra_notes FROM items WHERE request_id = $1
`

func (q *Queries) GetItemsByRequest(ctx context.Context, requestID int64) ([]Item, error) {
	rows, err := q.db.QueryContext(ctx, getItemsByRequest, requestID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Item{}
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.ID,
			&i.RequestedBy,
			&i.RequestID,
			&i.Name,
			&i.QuantityType,
			&i.Quantity,
			&i.PreferredBrand,
			&i.PreferredStore,
			&i.Image,
			&i.Found,
			&i.ExtraNotes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getItemsByUser = `-- name: GetItemsByUser :many
SELECT id, requested_by, request_id, name, quantity_type, quantity, preferred_brand, preferred_store, image, found, extra_notes FROM items WHERE requested_by = $1
`

func (q *Queries) GetItemsByUser(ctx context.Context, requestedBy int64) ([]Item, error) {
	rows, err := q.db.QueryContext(ctx, getItemsByUser, requestedBy)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Item{}
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.ID,
			&i.RequestedBy,
			&i.RequestID,
			&i.Name,
			&i.QuantityType,
			&i.Quantity,
			&i.PreferredBrand,
			&i.PreferredStore,
			&i.Image,
			&i.Found,
			&i.ExtraNotes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listItems = `-- name: ListItems :many
SELECT id, requested_by, request_id, name, quantity_type, quantity, preferred_brand, preferred_store, image, found, extra_notes FROM items
LIMIT $1
OFFSET $2
`

type ListItemsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListItems(ctx context.Context, arg ListItemsParams) ([]Item, error) {
	rows, err := q.db.QueryContext(ctx, listItems, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Item{}
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.ID,
			&i.RequestedBy,
			&i.RequestID,
			&i.Name,
			&i.QuantityType,
			&i.Quantity,
			&i.PreferredBrand,
			&i.PreferredStore,
			&i.Image,
			&i.Found,
			&i.ExtraNotes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateItem = `-- name: UpdateItem :one
UPDATE items SET
    name = $2,
    requested_by = $3,
    request_id = $4,
    quantity_type = $5,
    quantity = $6,
    preferred_brand = $7,
    preferred_store = $8,
    image = $9,
    extra_notes = $10
WHERE id = $1
RETURNING id, requested_by, request_id, name, quantity_type, quantity, preferred_brand, preferred_store, image, found, extra_notes
`

type UpdateItemParams struct {
	ID             int64            `json:"id"`
	Name           string           `json:"name"`
	RequestedBy    int64            `json:"requested_by"`
	RequestID      int64            `json:"request_id"`
	QuantityType   ItemQuantityType `json:"quantity_type"`
	Quantity       float64          `json:"quantity"`
	PreferredBrand sql.NullString   `json:"preferred_brand"`
	PreferredStore sql.NullInt64    `json:"preferred_store"`
	Image          sql.NullString   `json:"image"`
	ExtraNotes     sql.NullString   `json:"extra_notes"`
}

func (q *Queries) UpdateItem(ctx context.Context, arg UpdateItemParams) (Item, error) {
	row := q.db.QueryRowContext(ctx, updateItem,
		arg.ID,
		arg.Name,
		arg.RequestedBy,
		arg.RequestID,
		arg.QuantityType,
		arg.Quantity,
		arg.PreferredBrand,
		arg.PreferredStore,
		arg.Image,
		arg.ExtraNotes,
	)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.RequestedBy,
		&i.RequestID,
		&i.Name,
		&i.QuantityType,
		&i.Quantity,
		&i.PreferredBrand,
		&i.PreferredStore,
		&i.Image,
		&i.Found,
		&i.ExtraNotes,
	)
	return i, err
}

const updateItemExtraNotes = `-- name: UpdateItemExtraNotes :one
UPDATE items SET
    extra_notes = $2
WHERE id = $1
RETURNING id, requested_by, request_id, name, quantity_type, quantity, preferred_brand, preferred_store, image, found, extra_notes
`

type UpdateItemExtraNotesParams struct {
	ID         int64          `json:"id"`
	ExtraNotes sql.NullString `json:"extra_notes"`
}

func (q *Queries) UpdateItemExtraNotes(ctx context.Context, arg UpdateItemExtraNotesParams) (Item, error) {
	row := q.db.QueryRowContext(ctx, updateItemExtraNotes, arg.ID, arg.ExtraNotes)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.RequestedBy,
		&i.RequestID,
		&i.Name,
		&i.QuantityType,
		&i.Quantity,
		&i.PreferredBrand,
		&i.PreferredStore,
		&i.Image,
		&i.Found,
		&i.ExtraNotes,
	)
	return i, err
}

const updateItemImage = `-- name: UpdateItemImage :one
UPDATE items SET
    image = $2
WHERE id = $1
RETURNING id, requested_by, request_id, name, quantity_type, quantity, preferred_brand, preferred_store, image, found, extra_notes
`

type UpdateItemImageParams struct {
	ID    int64          `json:"id"`
	Image sql.NullString `json:"image"`
}

func (q *Queries) UpdateItemImage(ctx context.Context, arg UpdateItemImageParams) (Item, error) {
	row := q.db.QueryRowContext(ctx, updateItemImage, arg.ID, arg.Image)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.RequestedBy,
		&i.RequestID,
		&i.Name,
		&i.QuantityType,
		&i.Quantity,
		&i.PreferredBrand,
		&i.PreferredStore,
		&i.Image,
		&i.Found,
		&i.ExtraNotes,
	)
	return i, err
}

const updateItemName = `-- name: UpdateItemName :one
UPDATE items SET
    name = $2
WHERE id = $1
RETURNING id, requested_by, request_id, name, quantity_type, quantity, preferred_brand, preferred_store, image, found, extra_notes
`

type UpdateItemNameParams struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdateItemName(ctx context.Context, arg UpdateItemNameParams) (Item, error) {
	row := q.db.QueryRowContext(ctx, updateItemName, arg.ID, arg.Name)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.RequestedBy,
		&i.RequestID,
		&i.Name,
		&i.QuantityType,
		&i.Quantity,
		&i.PreferredBrand,
		&i.PreferredStore,
		&i.Image,
		&i.Found,
		&i.ExtraNotes,
	)
	return i, err
}

const updateItemPreferredBrand = `-- name: UpdateItemPreferredBrand :one
UPDATE items SET
    preferred_brand = $2
WHERE id = $1
RETURNING id, requested_by, request_id, name, quantity_type, quantity, preferred_brand, preferred_store, image, found, extra_notes
`

type UpdateItemPreferredBrandParams struct {
	ID             int64          `json:"id"`
	PreferredBrand sql.NullString `json:"preferred_brand"`
}

func (q *Queries) UpdateItemPreferredBrand(ctx context.Context, arg UpdateItemPreferredBrandParams) (Item, error) {
	row := q.db.QueryRowContext(ctx, updateItemPreferredBrand, arg.ID, arg.PreferredBrand)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.RequestedBy,
		&i.RequestID,
		&i.Name,
		&i.QuantityType,
		&i.Quantity,
		&i.PreferredBrand,
		&i.PreferredStore,
		&i.Image,
		&i.Found,
		&i.ExtraNotes,
	)
	return i, err
}

const updateItemPreferredStore = `-- name: UpdateItemPreferredStore :one
UPDATE items SET
    preferred_store = $2
WHERE id = $1
RETURNING id, requested_by, request_id, name, quantity_type, quantity, preferred_brand, preferred_store, image, found, extra_notes
`

type UpdateItemPreferredStoreParams struct {
	ID             int64         `json:"id"`
	PreferredStore sql.NullInt64 `json:"preferred_store"`
}

func (q *Queries) UpdateItemPreferredStore(ctx context.Context, arg UpdateItemPreferredStoreParams) (Item, error) {
	row := q.db.QueryRowContext(ctx, updateItemPreferredStore, arg.ID, arg.PreferredStore)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.RequestedBy,
		&i.RequestID,
		&i.Name,
		&i.QuantityType,
		&i.Quantity,
		&i.PreferredBrand,
		&i.PreferredStore,
		&i.Image,
		&i.Found,
		&i.ExtraNotes,
	)
	return i, err
}

const updateItemQuantity = `-- name: UpdateItemQuantity :one
UPDATE items SET
    quantity = $2,
    quantity_type = $3
WHERE id = $1
RETURNING id, requested_by, request_id, name, quantity_type, quantity, preferred_brand, preferred_store, image, found, extra_notes
`

type UpdateItemQuantityParams struct {
	ID           int64            `json:"id"`
	Quantity     float64          `json:"quantity"`
	QuantityType ItemQuantityType `json:"quantity_type"`
}

func (q *Queries) UpdateItemQuantity(ctx context.Context, arg UpdateItemQuantityParams) (Item, error) {
	row := q.db.QueryRowContext(ctx, updateItemQuantity, arg.ID, arg.Quantity, arg.QuantityType)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.RequestedBy,
		&i.RequestID,
		&i.Name,
		&i.QuantityType,
		&i.Quantity,
		&i.PreferredBrand,
		&i.PreferredStore,
		&i.Image,
		&i.Found,
		&i.ExtraNotes,
	)
	return i, err
}
