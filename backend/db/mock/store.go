// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/git-adithyanair/cs130-group-project/db/sqlc (interfaces: DBStore)

// Package mock_db is a generated GoMock package.
package mock_db

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	db "github.com/git-adithyanair/cs130-group-project/db/sqlc"
	gomock "github.com/golang/mock/gomock"
)

// MockDBStore is a mock of DBStore interface.
type MockDBStore struct {
	ctrl     *gomock.Controller
	recorder *MockDBStoreMockRecorder
}

// MockDBStoreMockRecorder is the mock recorder for MockDBStore.
type MockDBStoreMockRecorder struct {
	mock *MockDBStore
}

// NewMockDBStore creates a new mock instance.
func NewMockDBStore(ctrl *gomock.Controller) *MockDBStore {
	mock := &MockDBStore{ctrl: ctrl}
	mock.recorder = &MockDBStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBStore) EXPECT() *MockDBStoreMockRecorder {
	return m.recorder
}

// CreateCommunity mocks base method.
func (m *MockDBStore) CreateCommunity(arg0 context.Context, arg1 db.CreateCommunityParams) (db.Community, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCommunity", arg0, arg1)
	ret0, _ := ret[0].(db.Community)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCommunity indicates an expected call of CreateCommunity.
func (mr *MockDBStoreMockRecorder) CreateCommunity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCommunity", reflect.TypeOf((*MockDBStore)(nil).CreateCommunity), arg0, arg1)
}

// CreateCommunityStore mocks base method.
func (m *MockDBStore) CreateCommunityStore(arg0 context.Context, arg1 db.CreateCommunityStoreParams) (db.CommunityStore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCommunityStore", arg0, arg1)
	ret0, _ := ret[0].(db.CommunityStore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCommunityStore indicates an expected call of CreateCommunityStore.
func (mr *MockDBStoreMockRecorder) CreateCommunityStore(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCommunityStore", reflect.TypeOf((*MockDBStore)(nil).CreateCommunityStore), arg0, arg1)
}

// CreateErrand mocks base method.
func (m *MockDBStore) CreateErrand(arg0 context.Context, arg1 db.CreateErrandParams) (db.Errand, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateErrand", arg0, arg1)
	ret0, _ := ret[0].(db.Errand)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateErrand indicates an expected call of CreateErrand.
func (mr *MockDBStoreMockRecorder) CreateErrand(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateErrand", reflect.TypeOf((*MockDBStore)(nil).CreateErrand), arg0, arg1)
}

// CreateItem mocks base method.
func (m *MockDBStore) CreateItem(arg0 context.Context, arg1 db.CreateItemParams) (db.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateItem", arg0, arg1)
	ret0, _ := ret[0].(db.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateItem indicates an expected call of CreateItem.
func (mr *MockDBStoreMockRecorder) CreateItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateItem", reflect.TypeOf((*MockDBStore)(nil).CreateItem), arg0, arg1)
}

// CreateMember mocks base method.
func (m *MockDBStore) CreateMember(arg0 context.Context, arg1 db.CreateMemberParams) (db.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMember", arg0, arg1)
	ret0, _ := ret[0].(db.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMember indicates an expected call of CreateMember.
func (mr *MockDBStoreMockRecorder) CreateMember(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMember", reflect.TypeOf((*MockDBStore)(nil).CreateMember), arg0, arg1)
}

// CreateRequest mocks base method.
func (m *MockDBStore) CreateRequest(arg0 context.Context, arg1 db.CreateRequestParams) (db.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRequest", arg0, arg1)
	ret0, _ := ret[0].(db.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRequest indicates an expected call of CreateRequest.
func (mr *MockDBStoreMockRecorder) CreateRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRequest", reflect.TypeOf((*MockDBStore)(nil).CreateRequest), arg0, arg1)
}

// CreateStore mocks base method.
func (m *MockDBStore) CreateStore(arg0 context.Context, arg1 db.CreateStoreParams) (db.Store, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStore", arg0, arg1)
	ret0, _ := ret[0].(db.Store)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStore indicates an expected call of CreateStore.
func (mr *MockDBStoreMockRecorder) CreateStore(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStore", reflect.TypeOf((*MockDBStore)(nil).CreateStore), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockDBStore) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockDBStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockDBStore)(nil).CreateUser), arg0, arg1)
}

// DeleteCommunity mocks base method.
func (m *MockDBStore) DeleteCommunity(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCommunity", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCommunity indicates an expected call of DeleteCommunity.
func (mr *MockDBStoreMockRecorder) DeleteCommunity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCommunity", reflect.TypeOf((*MockDBStore)(nil).DeleteCommunity), arg0, arg1)
}

// DeleteCommunityStore mocks base method.
func (m *MockDBStore) DeleteCommunityStore(arg0 context.Context, arg1 db.DeleteCommunityStoreParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCommunityStore", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCommunityStore indicates an expected call of DeleteCommunityStore.
func (mr *MockDBStoreMockRecorder) DeleteCommunityStore(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCommunityStore", reflect.TypeOf((*MockDBStore)(nil).DeleteCommunityStore), arg0, arg1)
}

// DeleteCommunityStoresByCommunity mocks base method.
func (m *MockDBStore) DeleteCommunityStoresByCommunity(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCommunityStoresByCommunity", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCommunityStoresByCommunity indicates an expected call of DeleteCommunityStoresByCommunity.
func (mr *MockDBStoreMockRecorder) DeleteCommunityStoresByCommunity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCommunityStoresByCommunity", reflect.TypeOf((*MockDBStore)(nil).DeleteCommunityStoresByCommunity), arg0, arg1)
}

// DeleteCommunityStoresByStore mocks base method.
func (m *MockDBStore) DeleteCommunityStoresByStore(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCommunityStoresByStore", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCommunityStoresByStore indicates an expected call of DeleteCommunityStoresByStore.
func (mr *MockDBStoreMockRecorder) DeleteCommunityStoresByStore(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCommunityStoresByStore", reflect.TypeOf((*MockDBStore)(nil).DeleteCommunityStoresByStore), arg0, arg1)
}

// DeleteErrand mocks base method.
func (m *MockDBStore) DeleteErrand(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteErrand", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteErrand indicates an expected call of DeleteErrand.
func (mr *MockDBStoreMockRecorder) DeleteErrand(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteErrand", reflect.TypeOf((*MockDBStore)(nil).DeleteErrand), arg0, arg1)
}

// DeleteItem mocks base method.
func (m *MockDBStore) DeleteItem(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteItem", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteItem indicates an expected call of DeleteItem.
func (mr *MockDBStoreMockRecorder) DeleteItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteItem", reflect.TypeOf((*MockDBStore)(nil).DeleteItem), arg0, arg1)
}

// DeleteItemsByRequest mocks base method.
func (m *MockDBStore) DeleteItemsByRequest(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteItemsByRequest", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteItemsByRequest indicates an expected call of DeleteItemsByRequest.
func (mr *MockDBStoreMockRecorder) DeleteItemsByRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteItemsByRequest", reflect.TypeOf((*MockDBStore)(nil).DeleteItemsByRequest), arg0, arg1)
}

// DeleteItemsByUser mocks base method.
func (m *MockDBStore) DeleteItemsByUser(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteItemsByUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteItemsByUser indicates an expected call of DeleteItemsByUser.
func (mr *MockDBStoreMockRecorder) DeleteItemsByUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteItemsByUser", reflect.TypeOf((*MockDBStore)(nil).DeleteItemsByUser), arg0, arg1)
}

// DeleteMember mocks base method.
func (m *MockDBStore) DeleteMember(arg0 context.Context, arg1 db.DeleteMemberParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMember", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMember indicates an expected call of DeleteMember.
func (mr *MockDBStoreMockRecorder) DeleteMember(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMember", reflect.TypeOf((*MockDBStore)(nil).DeleteMember), arg0, arg1)
}

// DeleteMembersByCommunity mocks base method.
func (m *MockDBStore) DeleteMembersByCommunity(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMembersByCommunity", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMembersByCommunity indicates an expected call of DeleteMembersByCommunity.
func (mr *MockDBStoreMockRecorder) DeleteMembersByCommunity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMembersByCommunity", reflect.TypeOf((*MockDBStore)(nil).DeleteMembersByCommunity), arg0, arg1)
}

// DeleteMembersByUser mocks base method.
func (m *MockDBStore) DeleteMembersByUser(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMembersByUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMembersByUser indicates an expected call of DeleteMembersByUser.
func (mr *MockDBStoreMockRecorder) DeleteMembersByUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMembersByUser", reflect.TypeOf((*MockDBStore)(nil).DeleteMembersByUser), arg0, arg1)
}

// DeleteRequest mocks base method.
func (m *MockDBStore) DeleteRequest(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRequest", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRequest indicates an expected call of DeleteRequest.
func (mr *MockDBStoreMockRecorder) DeleteRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRequest", reflect.TypeOf((*MockDBStore)(nil).DeleteRequest), arg0, arg1)
}

// DeleteRequestsByErrand mocks base method.
func (m *MockDBStore) DeleteRequestsByErrand(arg0 context.Context, arg1 sql.NullInt64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRequestsByErrand", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRequestsByErrand indicates an expected call of DeleteRequestsByErrand.
func (mr *MockDBStoreMockRecorder) DeleteRequestsByErrand(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRequestsByErrand", reflect.TypeOf((*MockDBStore)(nil).DeleteRequestsByErrand), arg0, arg1)
}

// DeleteRequestsByStore mocks base method.
func (m *MockDBStore) DeleteRequestsByStore(arg0 context.Context, arg1 sql.NullInt64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRequestsByStore", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRequestsByStore indicates an expected call of DeleteRequestsByStore.
func (mr *MockDBStoreMockRecorder) DeleteRequestsByStore(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRequestsByStore", reflect.TypeOf((*MockDBStore)(nil).DeleteRequestsByStore), arg0, arg1)
}

// DeleteRequestsByUser mocks base method.
func (m *MockDBStore) DeleteRequestsByUser(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRequestsByUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRequestsByUser indicates an expected call of DeleteRequestsByUser.
func (mr *MockDBStoreMockRecorder) DeleteRequestsByUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRequestsByUser", reflect.TypeOf((*MockDBStore)(nil).DeleteRequestsByUser), arg0, arg1)
}

// DeleteStore mocks base method.
func (m *MockDBStore) DeleteStore(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStore", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStore indicates an expected call of DeleteStore.
func (mr *MockDBStoreMockRecorder) DeleteStore(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStore", reflect.TypeOf((*MockDBStore)(nil).DeleteStore), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockDBStore) DeleteUser(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockDBStoreMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockDBStore)(nil).DeleteUser), arg0, arg1)
}

// GetCommunitiesByAdmin mocks base method.
func (m *MockDBStore) GetCommunitiesByAdmin(arg0 context.Context, arg1 int64) ([]db.Community, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommunitiesByAdmin", arg0, arg1)
	ret0, _ := ret[0].([]db.Community)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommunitiesByAdmin indicates an expected call of GetCommunitiesByAdmin.
func (mr *MockDBStoreMockRecorder) GetCommunitiesByAdmin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommunitiesByAdmin", reflect.TypeOf((*MockDBStore)(nil).GetCommunitiesByAdmin), arg0, arg1)
}

// GetCommunity mocks base method.
func (m *MockDBStore) GetCommunity(arg0 context.Context, arg1 int64) (db.Community, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommunity", arg0, arg1)
	ret0, _ := ret[0].(db.Community)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommunity indicates an expected call of GetCommunity.
func (mr *MockDBStoreMockRecorder) GetCommunity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommunity", reflect.TypeOf((*MockDBStore)(nil).GetCommunity), arg0, arg1)
}

// GetCommunityByPlaceID mocks base method.
func (m *MockDBStore) GetCommunityByPlaceID(arg0 context.Context, arg1 string) (db.Community, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommunityByPlaceID", arg0, arg1)
	ret0, _ := ret[0].(db.Community)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommunityByPlaceID indicates an expected call of GetCommunityByPlaceID.
func (mr *MockDBStoreMockRecorder) GetCommunityByPlaceID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommunityByPlaceID", reflect.TypeOf((*MockDBStore)(nil).GetCommunityByPlaceID), arg0, arg1)
}

// GetCommunityStore mocks base method.
func (m *MockDBStore) GetCommunityStore(arg0 context.Context, arg1 db.GetCommunityStoreParams) (db.CommunityStore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommunityStore", arg0, arg1)
	ret0, _ := ret[0].(db.CommunityStore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommunityStore indicates an expected call of GetCommunityStore.
func (mr *MockDBStoreMockRecorder) GetCommunityStore(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommunityStore", reflect.TypeOf((*MockDBStore)(nil).GetCommunityStore), arg0, arg1)
}

// GetErrand mocks base method.
func (m *MockDBStore) GetErrand(arg0 context.Context, arg1 int64) (db.Errand, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetErrand", arg0, arg1)
	ret0, _ := ret[0].(db.Errand)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetErrand indicates an expected call of GetErrand.
func (mr *MockDBStoreMockRecorder) GetErrand(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetErrand", reflect.TypeOf((*MockDBStore)(nil).GetErrand), arg0, arg1)
}

// GetErrandsByCommunityId mocks base method.
func (m *MockDBStore) GetErrandsByCommunityId(arg0 context.Context, arg1 db.GetErrandsByCommunityIdParams) ([]db.Errand, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetErrandsByCommunityId", arg0, arg1)
	ret0, _ := ret[0].([]db.Errand)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetErrandsByCommunityId indicates an expected call of GetErrandsByCommunityId.
func (mr *MockDBStoreMockRecorder) GetErrandsByCommunityId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetErrandsByCommunityId", reflect.TypeOf((*MockDBStore)(nil).GetErrandsByCommunityId), arg0, arg1)
}

// GetErrandsByUserId mocks base method.
func (m *MockDBStore) GetErrandsByUserId(arg0 context.Context, arg1 int64) ([]db.Errand, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetErrandsByUserId", arg0, arg1)
	ret0, _ := ret[0].([]db.Errand)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetErrandsByUserId indicates an expected call of GetErrandsByUserId.
func (mr *MockDBStoreMockRecorder) GetErrandsByUserId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetErrandsByUserId", reflect.TypeOf((*MockDBStore)(nil).GetErrandsByUserId), arg0, arg1)
}

// GetItem mocks base method.
func (m *MockDBStore) GetItem(arg0 context.Context, arg1 int64) (db.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItem", arg0, arg1)
	ret0, _ := ret[0].(db.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItem indicates an expected call of GetItem.
func (mr *MockDBStoreMockRecorder) GetItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItem", reflect.TypeOf((*MockDBStore)(nil).GetItem), arg0, arg1)
}

// GetItemsByRequest mocks base method.
func (m *MockDBStore) GetItemsByRequest(arg0 context.Context, arg1 int64) ([]db.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemsByRequest", arg0, arg1)
	ret0, _ := ret[0].([]db.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemsByRequest indicates an expected call of GetItemsByRequest.
func (mr *MockDBStoreMockRecorder) GetItemsByRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemsByRequest", reflect.TypeOf((*MockDBStore)(nil).GetItemsByRequest), arg0, arg1)
}

// GetItemsByUser mocks base method.
func (m *MockDBStore) GetItemsByUser(arg0 context.Context, arg1 int64) ([]db.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemsByUser", arg0, arg1)
	ret0, _ := ret[0].([]db.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemsByUser indicates an expected call of GetItemsByUser.
func (mr *MockDBStoreMockRecorder) GetItemsByUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemsByUser", reflect.TypeOf((*MockDBStore)(nil).GetItemsByUser), arg0, arg1)
}

// GetMember mocks base method.
func (m *MockDBStore) GetMember(arg0 context.Context, arg1 db.GetMemberParams) (db.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMember", arg0, arg1)
	ret0, _ := ret[0].(db.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMember indicates an expected call of GetMember.
func (mr *MockDBStoreMockRecorder) GetMember(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMember", reflect.TypeOf((*MockDBStore)(nil).GetMember), arg0, arg1)
}

// GetPendingRequestsByCommunityId mocks base method.
func (m *MockDBStore) GetPendingRequestsByCommunityId(arg0 context.Context, arg1 sql.NullInt64) ([]db.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingRequestsByCommunityId", arg0, arg1)
	ret0, _ := ret[0].([]db.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingRequestsByCommunityId indicates an expected call of GetPendingRequestsByCommunityId.
func (mr *MockDBStoreMockRecorder) GetPendingRequestsByCommunityId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingRequestsByCommunityId", reflect.TypeOf((*MockDBStore)(nil).GetPendingRequestsByCommunityId), arg0, arg1)
}

// GetPendingRequestsByStoreId mocks base method.
func (m *MockDBStore) GetPendingRequestsByStoreId(arg0 context.Context, arg1 sql.NullInt64) ([]db.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingRequestsByStoreId", arg0, arg1)
	ret0, _ := ret[0].([]db.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingRequestsByStoreId indicates an expected call of GetPendingRequestsByStoreId.
func (mr *MockDBStoreMockRecorder) GetPendingRequestsByStoreId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingRequestsByStoreId", reflect.TypeOf((*MockDBStore)(nil).GetPendingRequestsByStoreId), arg0, arg1)
}

// GetRequest mocks base method.
func (m *MockDBStore) GetRequest(arg0 context.Context, arg1 int64) (db.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequest", arg0, arg1)
	ret0, _ := ret[0].(db.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequest indicates an expected call of GetRequest.
func (mr *MockDBStoreMockRecorder) GetRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequest", reflect.TypeOf((*MockDBStore)(nil).GetRequest), arg0, arg1)
}

// GetRequestsByCommunityId mocks base method.
func (m *MockDBStore) GetRequestsByCommunityId(arg0 context.Context, arg1 db.GetRequestsByCommunityIdParams) ([]db.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestsByCommunityId", arg0, arg1)
	ret0, _ := ret[0].([]db.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequestsByCommunityId indicates an expected call of GetRequestsByCommunityId.
func (mr *MockDBStoreMockRecorder) GetRequestsByCommunityId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestsByCommunityId", reflect.TypeOf((*MockDBStore)(nil).GetRequestsByCommunityId), arg0, arg1)
}

// GetRequestsByErrandId mocks base method.
func (m *MockDBStore) GetRequestsByErrandId(arg0 context.Context, arg1 sql.NullInt64) ([]db.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestsByErrandId", arg0, arg1)
	ret0, _ := ret[0].([]db.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequestsByErrandId indicates an expected call of GetRequestsByErrandId.
func (mr *MockDBStoreMockRecorder) GetRequestsByErrandId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestsByErrandId", reflect.TypeOf((*MockDBStore)(nil).GetRequestsByErrandId), arg0, arg1)
}

// GetRequestsByStoreId mocks base method.
func (m *MockDBStore) GetRequestsByStoreId(arg0 context.Context, arg1 sql.NullInt64) ([]db.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestsByStoreId", arg0, arg1)
	ret0, _ := ret[0].([]db.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequestsByStoreId indicates an expected call of GetRequestsByStoreId.
func (mr *MockDBStoreMockRecorder) GetRequestsByStoreId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestsByStoreId", reflect.TypeOf((*MockDBStore)(nil).GetRequestsByStoreId), arg0, arg1)
}

// GetRequestsByUserId mocks base method.
func (m *MockDBStore) GetRequestsByUserId(arg0 context.Context, arg1 db.GetRequestsByUserIdParams) ([]db.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestsByUserId", arg0, arg1)
	ret0, _ := ret[0].([]db.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequestsByUserId indicates an expected call of GetRequestsByUserId.
func (mr *MockDBStoreMockRecorder) GetRequestsByUserId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestsByUserId", reflect.TypeOf((*MockDBStore)(nil).GetRequestsByUserId), arg0, arg1)
}

// GetRequestsForUserByStatus mocks base method.
func (m *MockDBStore) GetRequestsForUserByStatus(arg0 context.Context, arg1 db.GetRequestsForUserByStatusParams) ([]db.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestsForUserByStatus", arg0, arg1)
	ret0, _ := ret[0].([]db.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequestsForUserByStatus indicates an expected call of GetRequestsForUserByStatus.
func (mr *MockDBStoreMockRecorder) GetRequestsForUserByStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestsForUserByStatus", reflect.TypeOf((*MockDBStore)(nil).GetRequestsForUserByStatus), arg0, arg1)
}

// GetStore mocks base method.
func (m *MockDBStore) GetStore(arg0 context.Context, arg1 int64) (db.Store, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStore", arg0, arg1)
	ret0, _ := ret[0].(db.Store)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStore indicates an expected call of GetStore.
func (mr *MockDBStoreMockRecorder) GetStore(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStore", reflect.TypeOf((*MockDBStore)(nil).GetStore), arg0, arg1)
}

// GetStoreByPlaceId mocks base method.
func (m *MockDBStore) GetStoreByPlaceId(arg0 context.Context, arg1 string) (db.Store, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoreByPlaceId", arg0, arg1)
	ret0, _ := ret[0].(db.Store)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoreByPlaceId indicates an expected call of GetStoreByPlaceId.
func (mr *MockDBStoreMockRecorder) GetStoreByPlaceId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoreByPlaceId", reflect.TypeOf((*MockDBStore)(nil).GetStoreByPlaceId), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockDBStore) GetUser(arg0 context.Context, arg1 int64) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockDBStoreMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockDBStore)(nil).GetUser), arg0, arg1)
}

// GetUserByEmail mocks base method.
func (m *MockDBStore) GetUserByEmail(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockDBStoreMockRecorder) GetUserByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockDBStore)(nil).GetUserByEmail), arg0, arg1)
}

// GetUserByPhoneNumber mocks base method.
func (m *MockDBStore) GetUserByPhoneNumber(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByPhoneNumber", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByPhoneNumber indicates an expected call of GetUserByPhoneNumber.
func (mr *MockDBStoreMockRecorder) GetUserByPhoneNumber(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByPhoneNumber", reflect.TypeOf((*MockDBStore)(nil).GetUserByPhoneNumber), arg0, arg1)
}

// GetUserCommunities mocks base method.
func (m *MockDBStore) GetUserCommunities(arg0 context.Context, arg1 int64) ([]db.Community, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserCommunities", arg0, arg1)
	ret0, _ := ret[0].([]db.Community)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserCommunities indicates an expected call of GetUserCommunities.
func (mr *MockDBStoreMockRecorder) GetUserCommunities(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserCommunities", reflect.TypeOf((*MockDBStore)(nil).GetUserCommunities), arg0, arg1)
}

// ListCommunities mocks base method.
func (m *MockDBStore) ListCommunities(arg0 context.Context, arg1 db.ListCommunitiesParams) ([]db.Community, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCommunities", arg0, arg1)
	ret0, _ := ret[0].([]db.Community)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCommunities indicates an expected call of ListCommunities.
func (mr *MockDBStoreMockRecorder) ListCommunities(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCommunities", reflect.TypeOf((*MockDBStore)(nil).ListCommunities), arg0, arg1)
}

// ListCommunityStoresByCommunity mocks base method.
func (m *MockDBStore) ListCommunityStoresByCommunity(arg0 context.Context, arg1 int64) ([]db.CommunityStore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCommunityStoresByCommunity", arg0, arg1)
	ret0, _ := ret[0].([]db.CommunityStore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCommunityStoresByCommunity indicates an expected call of ListCommunityStoresByCommunity.
func (mr *MockDBStoreMockRecorder) ListCommunityStoresByCommunity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCommunityStoresByCommunity", reflect.TypeOf((*MockDBStore)(nil).ListCommunityStoresByCommunity), arg0, arg1)
}

// ListCommunityStoresByStores mocks base method.
func (m *MockDBStore) ListCommunityStoresByStores(arg0 context.Context, arg1 int64) ([]db.CommunityStore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCommunityStoresByStores", arg0, arg1)
	ret0, _ := ret[0].([]db.CommunityStore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCommunityStoresByStores indicates an expected call of ListCommunityStoresByStores.
func (mr *MockDBStoreMockRecorder) ListCommunityStoresByStores(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCommunityStoresByStores", reflect.TypeOf((*MockDBStore)(nil).ListCommunityStoresByStores), arg0, arg1)
}

// ListErrands mocks base method.
func (m *MockDBStore) ListErrands(arg0 context.Context, arg1 db.ListErrandsParams) ([]db.Errand, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListErrands", arg0, arg1)
	ret0, _ := ret[0].([]db.Errand)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListErrands indicates an expected call of ListErrands.
func (mr *MockDBStoreMockRecorder) ListErrands(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListErrands", reflect.TypeOf((*MockDBStore)(nil).ListErrands), arg0, arg1)
}

// ListItems mocks base method.
func (m *MockDBStore) ListItems(arg0 context.Context, arg1 db.ListItemsParams) ([]db.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListItems", arg0, arg1)
	ret0, _ := ret[0].([]db.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListItems indicates an expected call of ListItems.
func (mr *MockDBStoreMockRecorder) ListItems(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListItems", reflect.TypeOf((*MockDBStore)(nil).ListItems), arg0, arg1)
}

// ListMembersByCommunity mocks base method.
func (m *MockDBStore) ListMembersByCommunity(arg0 context.Context, arg1 int64) ([]db.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMembersByCommunity", arg0, arg1)
	ret0, _ := ret[0].([]db.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMembersByCommunity indicates an expected call of ListMembersByCommunity.
func (mr *MockDBStoreMockRecorder) ListMembersByCommunity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMembersByCommunity", reflect.TypeOf((*MockDBStore)(nil).ListMembersByCommunity), arg0, arg1)
}

// ListMembersByUser mocks base method.
func (m *MockDBStore) ListMembersByUser(arg0 context.Context, arg1 int64) ([]db.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMembersByUser", arg0, arg1)
	ret0, _ := ret[0].([]db.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMembersByUser indicates an expected call of ListMembersByUser.
func (mr *MockDBStoreMockRecorder) ListMembersByUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMembersByUser", reflect.TypeOf((*MockDBStore)(nil).ListMembersByUser), arg0, arg1)
}

// ListRequests mocks base method.
func (m *MockDBStore) ListRequests(arg0 context.Context, arg1 db.ListRequestsParams) ([]db.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRequests", arg0, arg1)
	ret0, _ := ret[0].([]db.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRequests indicates an expected call of ListRequests.
func (mr *MockDBStoreMockRecorder) ListRequests(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRequests", reflect.TypeOf((*MockDBStore)(nil).ListRequests), arg0, arg1)
}

// ListStores mocks base method.
func (m *MockDBStore) ListStores(arg0 context.Context, arg1 db.ListStoresParams) ([]db.Store, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStores", arg0, arg1)
	ret0, _ := ret[0].([]db.Store)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStores indicates an expected call of ListStores.
func (mr *MockDBStoreMockRecorder) ListStores(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStores", reflect.TypeOf((*MockDBStore)(nil).ListStores), arg0, arg1)
}

// ListUsers mocks base method.
func (m *MockDBStore) ListUsers(arg0 context.Context, arg1 db.ListUsersParams) ([]db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", arg0, arg1)
	ret0, _ := ret[0].([]db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockDBStoreMockRecorder) ListUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockDBStore)(nil).ListUsers), arg0, arg1)
}

// UpdateCommunity mocks base method.
func (m *MockDBStore) UpdateCommunity(arg0 context.Context, arg1 db.UpdateCommunityParams) (db.Community, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCommunity", arg0, arg1)
	ret0, _ := ret[0].(db.Community)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCommunity indicates an expected call of UpdateCommunity.
func (mr *MockDBStoreMockRecorder) UpdateCommunity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCommunity", reflect.TypeOf((*MockDBStore)(nil).UpdateCommunity), arg0, arg1)
}

// UpdateCommunityAdmin mocks base method.
func (m *MockDBStore) UpdateCommunityAdmin(arg0 context.Context, arg1 db.UpdateCommunityAdminParams) (db.Community, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCommunityAdmin", arg0, arg1)
	ret0, _ := ret[0].(db.Community)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCommunityAdmin indicates an expected call of UpdateCommunityAdmin.
func (mr *MockDBStoreMockRecorder) UpdateCommunityAdmin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCommunityAdmin", reflect.TypeOf((*MockDBStore)(nil).UpdateCommunityAdmin), arg0, arg1)
}

// UpdateErrand mocks base method.
func (m *MockDBStore) UpdateErrand(arg0 context.Context, arg1 db.UpdateErrandParams) (db.Errand, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateErrand", arg0, arg1)
	ret0, _ := ret[0].(db.Errand)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateErrand indicates an expected call of UpdateErrand.
func (mr *MockDBStoreMockRecorder) UpdateErrand(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateErrand", reflect.TypeOf((*MockDBStore)(nil).UpdateErrand), arg0, arg1)
}

// UpdateErrandStatus mocks base method.
func (m *MockDBStore) UpdateErrandStatus(arg0 context.Context, arg1 db.UpdateErrandStatusParams) (db.Errand, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateErrandStatus", arg0, arg1)
	ret0, _ := ret[0].(db.Errand)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateErrandStatus indicates an expected call of UpdateErrandStatus.
func (mr *MockDBStoreMockRecorder) UpdateErrandStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateErrandStatus", reflect.TypeOf((*MockDBStore)(nil).UpdateErrandStatus), arg0, arg1)
}

// UpdateItem mocks base method.
func (m *MockDBStore) UpdateItem(arg0 context.Context, arg1 db.UpdateItemParams) (db.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateItem", arg0, arg1)
	ret0, _ := ret[0].(db.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateItem indicates an expected call of UpdateItem.
func (mr *MockDBStoreMockRecorder) UpdateItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItem", reflect.TypeOf((*MockDBStore)(nil).UpdateItem), arg0, arg1)
}

// UpdateItemExtraNotes mocks base method.
func (m *MockDBStore) UpdateItemExtraNotes(arg0 context.Context, arg1 db.UpdateItemExtraNotesParams) (db.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateItemExtraNotes", arg0, arg1)
	ret0, _ := ret[0].(db.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateItemExtraNotes indicates an expected call of UpdateItemExtraNotes.
func (mr *MockDBStoreMockRecorder) UpdateItemExtraNotes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItemExtraNotes", reflect.TypeOf((*MockDBStore)(nil).UpdateItemExtraNotes), arg0, arg1)
}

// UpdateItemFound mocks base method.
func (m *MockDBStore) UpdateItemFound(arg0 context.Context, arg1 db.UpdateItemFoundParams) (db.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateItemFound", arg0, arg1)
	ret0, _ := ret[0].(db.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateItemFound indicates an expected call of UpdateItemFound.
func (mr *MockDBStoreMockRecorder) UpdateItemFound(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItemFound", reflect.TypeOf((*MockDBStore)(nil).UpdateItemFound), arg0, arg1)
}

// UpdateItemImage mocks base method.
func (m *MockDBStore) UpdateItemImage(arg0 context.Context, arg1 db.UpdateItemImageParams) (db.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateItemImage", arg0, arg1)
	ret0, _ := ret[0].(db.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateItemImage indicates an expected call of UpdateItemImage.
func (mr *MockDBStoreMockRecorder) UpdateItemImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItemImage", reflect.TypeOf((*MockDBStore)(nil).UpdateItemImage), arg0, arg1)
}

// UpdateItemName mocks base method.
func (m *MockDBStore) UpdateItemName(arg0 context.Context, arg1 db.UpdateItemNameParams) (db.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateItemName", arg0, arg1)
	ret0, _ := ret[0].(db.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateItemName indicates an expected call of UpdateItemName.
func (mr *MockDBStoreMockRecorder) UpdateItemName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItemName", reflect.TypeOf((*MockDBStore)(nil).UpdateItemName), arg0, arg1)
}

// UpdateItemPreferredBrand mocks base method.
func (m *MockDBStore) UpdateItemPreferredBrand(arg0 context.Context, arg1 db.UpdateItemPreferredBrandParams) (db.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateItemPreferredBrand", arg0, arg1)
	ret0, _ := ret[0].(db.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateItemPreferredBrand indicates an expected call of UpdateItemPreferredBrand.
func (mr *MockDBStoreMockRecorder) UpdateItemPreferredBrand(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItemPreferredBrand", reflect.TypeOf((*MockDBStore)(nil).UpdateItemPreferredBrand), arg0, arg1)
}

// UpdateItemQuantity mocks base method.
func (m *MockDBStore) UpdateItemQuantity(arg0 context.Context, arg1 db.UpdateItemQuantityParams) (db.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateItemQuantity", arg0, arg1)
	ret0, _ := ret[0].(db.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateItemQuantity indicates an expected call of UpdateItemQuantity.
func (mr *MockDBStoreMockRecorder) UpdateItemQuantity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItemQuantity", reflect.TypeOf((*MockDBStore)(nil).UpdateItemQuantity), arg0, arg1)
}

// UpdateRequest mocks base method.
func (m *MockDBStore) UpdateRequest(arg0 context.Context, arg1 db.UpdateRequestParams) (db.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRequest", arg0, arg1)
	ret0, _ := ret[0].(db.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRequest indicates an expected call of UpdateRequest.
func (mr *MockDBStoreMockRecorder) UpdateRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRequest", reflect.TypeOf((*MockDBStore)(nil).UpdateRequest), arg0, arg1)
}

// UpdateRequestErrandAndStatus mocks base method.
func (m *MockDBStore) UpdateRequestErrandAndStatus(arg0 context.Context, arg1 db.UpdateRequestErrandAndStatusParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRequestErrandAndStatus", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRequestErrandAndStatus indicates an expected call of UpdateRequestErrandAndStatus.
func (mr *MockDBStoreMockRecorder) UpdateRequestErrandAndStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRequestErrandAndStatus", reflect.TypeOf((*MockDBStore)(nil).UpdateRequestErrandAndStatus), arg0, arg1)
}

// UpdateRequestStatus mocks base method.
func (m *MockDBStore) UpdateRequestStatus(arg0 context.Context, arg1 db.UpdateRequestStatusParams) (db.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRequestStatus", arg0, arg1)
	ret0, _ := ret[0].(db.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRequestStatus indicates an expected call of UpdateRequestStatus.
func (mr *MockDBStoreMockRecorder) UpdateRequestStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRequestStatus", reflect.TypeOf((*MockDBStore)(nil).UpdateRequestStatus), arg0, arg1)
}

// UpdateStore mocks base method.
func (m *MockDBStore) UpdateStore(arg0 context.Context, arg1 db.UpdateStoreParams) (db.Store, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStore", arg0, arg1)
	ret0, _ := ret[0].(db.Store)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStore indicates an expected call of UpdateStore.
func (mr *MockDBStoreMockRecorder) UpdateStore(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStore", reflect.TypeOf((*MockDBStore)(nil).UpdateStore), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockDBStore) UpdateUser(arg0 context.Context, arg1 db.UpdateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockDBStoreMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockDBStore)(nil).UpdateUser), arg0, arg1)
}

// UpdateUserLocation mocks base method.
func (m *MockDBStore) UpdateUserLocation(arg0 context.Context, arg1 db.UpdateUserLocationParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserLocation", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserLocation indicates an expected call of UpdateUserLocation.
func (mr *MockDBStoreMockRecorder) UpdateUserLocation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserLocation", reflect.TypeOf((*MockDBStore)(nil).UpdateUserLocation), arg0, arg1)
}

// UpdateUserName mocks base method.
func (m *MockDBStore) UpdateUserName(arg0 context.Context, arg1 db.UpdateUserNameParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserName", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserName indicates an expected call of UpdateUserName.
func (mr *MockDBStoreMockRecorder) UpdateUserName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserName", reflect.TypeOf((*MockDBStore)(nil).UpdateUserName), arg0, arg1)
}

// UpdateUserProfilePicture mocks base method.
func (m *MockDBStore) UpdateUserProfilePicture(arg0 context.Context, arg1 db.UpdateUserProfilePictureParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserProfilePicture", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserProfilePicture indicates an expected call of UpdateUserProfilePicture.
func (mr *MockDBStoreMockRecorder) UpdateUserProfilePicture(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserProfilePicture", reflect.TypeOf((*MockDBStore)(nil).UpdateUserProfilePicture), arg0, arg1)
}
